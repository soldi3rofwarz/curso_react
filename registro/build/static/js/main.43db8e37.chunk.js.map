{"version":3,"sources":["components/Formulario.js","components/citas.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","citas","setCitas","error","getError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","console","log","type","placeholder","onChange","Citas","eliminarcita","onClick","App","citaslocal","JSON","parse","localStorage","getItem","citamain","guardarCitamain","useEffect","setItem","stringify","elimina","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.43db8e37.chunk.js","sourcesContent":["import React ,{Fragment, useState}from 'react';\nimport uuid from 'uuid/v4'\nimport PropTypes from 'prop-types'\n\nconst Formulario = ({crearCita}) => {\n\n    //state para citas\n    const [citas,setCitas] = useState({\n        mascota: '',\n        propietario:'',\n        fecha:'',\n        hora:'',\n        sintomas:''\n\n    })\n\n    const [error, getError] = useState(false);\n        //{\n        //esto va a dentro de una funcion.\n        //la e es una variable que se agregar en los parametros\n        //console.log(e.target.name, e.target.value); <---------\n        //e.target.name: muestra de donde vienen los datos\n        //e.target.value: muestra el contenido ingresado en cada campo}\n\n        const actualizarState = e=>{\n            setCitas({\n                ...citas, //spreadOperator saca una copia del state para que al modificarlo no cambien los datos. sirve para objetos y arreglos  \n                //array destructuring\n                [e.target.name ]: e.target.value //truco para escribir los datos del input dentro de la propiedad del state\n            })\n    }\n\n        //extraer los valores\n        const {mascota,propietario,fecha,hora,sintomas} = citas;\n\n        //cuando el usuario preciona agregar\n\n        const submitCita=e=>{\n            e.preventDefault();\n\n            //validar\n            if(mascota.trim() ===''|| propietario.trim() ===''||fecha.trim() ===''||\n            hora.trim() ===''||sintomas.trim() ==='') // trim elimina espacios en blanco al inicio y final\n            {\n                getError(true);\n                return;// el return evita que el recorrido avance sin comprovar el if\n            }\n\n            //eliminar mensaje de vacio\n            getError(false)\n            //asignar ID\n            citas.id = uuid();\n            console.log(citas);\n            //crear cita\n            crearCita(citas)\n            //reiniciar el form\n            setCitas({\n                mascota: '',\n                propietario:'',\n                fecha:'',\n                hora:'',\n                sintomas:''\n            })\n        }\n\n    return (\n        <Fragment>\n            <h2>Insertar citas</h2>\n\n            {error? <p className=\"alerta-error\">Debe llenar todos los campos</p>: null}\n\n            <form\n            onSubmit={submitCita}\n            >\n                <label>Nombre mascotas</label>\n                <input\n                    type= \"text\"\n                    name=\"mascota\"\n                    className=\"u-full-width\"\n                    placeholder=\"nombre de mascota\"\n                    onChange={actualizarState}\n                    value={mascota}\n                />\n\n                <label>Nombre Due√±o</label>\n                <input\n                    type= \"text\"\n                    name=\"propietario\"\n                    className=\"u-full-width\"\n                    placeholder=\"nombre de propietario\"\n                    onChange={actualizarState}\n                    value={propietario}\n                />\n\n                <label>Fecha</label>\n                <input\n                    type= \"date\"\n                    name=\"fecha\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={fecha}\n                />\n\n                <label>Hora</label>\n                <input\n                    type= \"time\"\n                    name=\"hora\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={hora}\n                />\n\n                <label>Sintomas</label>\n                <textarea \n                    className=\"u-full-width\"\n                    name=\"sintomas\"\n                    onChange={actualizarState}\n                    value={sintomas}\n                >  \n                </textarea> \n                \n                <button\n                    type=\"submit\"\n                    className=\"u-full-width button-primary\"\n                >\n                    enviar\n                </button>\n                \n            </form>\n        </Fragment>\n    );\n}\n Formulario.propTypes={\n     crearCita: PropTypes.func.isRequired\n }\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types'\n\nconst Citas = ({citas, eliminarcita}) => (\n    <div className=\"cita\">\n        <p>mascota: <span>{citas.mascota}</span></p>\n        <p>Propietario: <span>{citas.propietario}</span></p>\n        <p>fecha: <span>{citas.fecha}</span></p>\n        <p>hora: <span>{citas.hora}</span></p>\n        <p>sintomas: <span>{citas.sintomas}</span></p>\n\n        <button className =\"button eliminar u-full-width\"\n            onClick={()=> eliminarcita(citas.id)}\n        >eliminar &times;</button>\n    </div>\n)\nCitas.propTypes = {\n    citas: PropTypes.object.isRequired,\n    eliminarcita: PropTypes.func.isRequired\n}\n \nexport default Citas;","import React , {Fragment, useState, useEffect}from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/citas';\n\n\nfunction App() {\n  // LOCALSTORAGE SOLO GUARDA STRING \n  let citaslocal = JSON.parse(localStorage.getItem('citas')); //JSON.PARSE CONVIERTE A STRING\n  if (!citaslocal){\n    citaslocal = []\n  }\n\n  const [citamain, guardarCitamain]= useState(citaslocal)\n\n  useEffect(()=>{\n    if(citaslocal){\n      localStorage.setItem('citas', JSON.stringify(citamain))\n    }\n    else\n    {\n      localStorage.setItem('citas', JSON.stringify([]))\n    }\n\n  }, [citamain, citaslocal]) //el arreglo vacio sirve para que solo haga un cilo, sirve para definir ciclos e apis\n\n  const crearCita = citas =>{\n    guardarCitamain([\n      ...citamain,\n      citas\n    ])\n  }\n\n  const eliminarcita =(id)=>{\n    const elimina = citamain.filter(citas => citas.id !== id )\n    guardarCitamain(elimina);\n  }\n\n  // mesaje de no hay citas\n  const titulo = citamain.length===0 ? 'No hay citas': 'administra tus citas'\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario\n            crearCita= {crearCita}\n            />\n          </div>\n\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citamain.map(citas=>(\n              <Cita\n              key = {citas.id}\n              citas= {citas}\n              eliminarcita={eliminarcita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}